
tinytest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000116  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003a  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000168  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ed  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000244  00000000  00000000  00000469  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c6  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000007ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 e1       	ldi	r30, 0x16	; 22
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a0 37       	cpi	r26, 0x70	; 112
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>
  44:	02 d0       	rcall	.+4      	; 0x4a <main>
  46:	65 c0       	rjmp	.+202    	; 0x112 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <main>:
void blink(void);
void setbrightnessA(int);
void setbrightnessB(int);

int main (void)
{
  4a:	df 93       	push	r29
  4c:	cf 93       	push	r28
  4e:	cd b7       	in	r28, 0x3d	; 61
  50:	de b7       	in	r29, 0x3e	; 62
  52:	60 97       	sbiw	r28, 0x10	; 16
  54:	0f b6       	in	r0, 0x3f	; 63
  56:	f8 94       	cli
  58:	de bf       	out	0x3e, r29	; 62
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	cd bf       	out	0x3d, r28	; 61
  int a[4]={0,127,255,127};
  5e:	de 01       	movw	r26, r28
  60:	11 96       	adiw	r26, 0x01	; 1
  62:	e8 e6       	ldi	r30, 0x68	; 104
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	88 e0       	ldi	r24, 0x08	; 8
  68:	01 90       	ld	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	81 50       	subi	r24, 0x01	; 1
  6e:	e1 f7       	brne	.-8      	; 0x68 <main+0x1e>
  int b[4]={1,1,-1,-1};
  70:	de 01       	movw	r26, r28
  72:	19 96       	adiw	r26, 0x09	; 9
  74:	e0 e6       	ldi	r30, 0x60	; 96
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	88 e0       	ldi	r24, 0x08	; 8
  7a:	01 90       	ld	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	81 50       	subi	r24, 0x01	; 1
  80:	e1 f7       	brne	.-8      	; 0x7a <main+0x30>
	int i;
	init_pwm();
  82:	34 d0       	rcall	.+104    	; 0xec <init_pwm>
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	50 e0       	ldi	r21, 0x00	; 0


  for(;;) {
		for (i=0; i<=3; i++) {
			a[i]+=b[i];
  88:	de 01       	movw	r26, r28
  8a:	11 96       	adiw	r26, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	64 ef       	ldi	r22, 0xF4	; 244
  8e:	71 e0       	ldi	r23, 0x01	; 1
  90:	1a c0       	rjmp	.+52     	; 0xc6 <main+0x7c>
  92:	fa 01       	movw	r30, r20
  94:	ee 0f       	add	r30, r30
  96:	ff 1f       	adc	r31, r31
  98:	ea 0f       	add	r30, r26
  9a:	fb 1f       	adc	r31, r27
  9c:	20 85       	ldd	r18, Z+8	; 0x08
  9e:	31 85       	ldd	r19, Z+9	; 0x09
  a0:	80 81       	ld	r24, Z
  a2:	91 81       	ldd	r25, Z+1	; 0x01
  a4:	82 0f       	add	r24, r18
  a6:	93 1f       	adc	r25, r19
  a8:	91 83       	std	Z+1, r25	; 0x01
  aa:	80 83       	st	Z, r24
			if (a[i] == 255) b[i]*=-1;
  ac:	8f 3f       	cpi	r24, 0xFF	; 255
  ae:	91 05       	cpc	r25, r1
  b0:	11 f0       	breq	.+4      	; 0xb6 <main+0x6c>
			if (a[i] == 0) b[i]*=-1;
  b2:	89 2b       	or	r24, r25
  b4:	31 f4       	brne	.+12     	; 0xc2 <main+0x78>
  b6:	88 27       	eor	r24, r24
  b8:	99 27       	eor	r25, r25
  ba:	82 1b       	sub	r24, r18
  bc:	93 0b       	sbc	r25, r19
  be:	91 87       	std	Z+9, r25	; 0x09
  c0:	80 87       	std	Z+8, r24	; 0x08
	int i;
	init_pwm();


  for(;;) {
		for (i=0; i<=3; i++) {
  c2:	4f 5f       	subi	r20, 0xFF	; 255
  c4:	5f 4f       	sbci	r21, 0xFF	; 255
  c6:	44 30       	cpi	r20, 0x04	; 4
  c8:	51 05       	cpc	r21, r1
  ca:	1c f3       	brlt	.-58     	; 0x92 <main+0x48>
  cc:	cb 01       	movw	r24, r22
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x84>
			a[i]+=b[i];
			if (a[i] == 255) b[i]*=-1;
			if (a[i] == 0) b[i]*=-1;
		}
		_delay_loop_2(500);
		OCR0A=a[0];
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	86 bf       	out	0x36, r24	; 54
		OCR0B=a[1];
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	8c bf       	out	0x3c, r24	; 60
  	OCR1AH = 0;
  da:	1b bc       	out	0x2b, r1	; 43
  	OCR1AL = a[2];
  dc:	8d 81       	ldd	r24, Y+5	; 0x05
  de:	8a bd       	out	0x2a, r24	; 42
		OCR1BH = 0;
  e0:	19 bc       	out	0x29, r1	; 41
		OCR1BL = a[3];
  e2:	8f 81       	ldd	r24, Y+7	; 0x07
  e4:	88 bd       	out	0x28, r24	; 40
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	ed cf       	rjmp	.-38     	; 0xc6 <main+0x7c>

000000ec <init_pwm>:
{  
  
  // Timer 0 PWM Init

	// Timer/Counter Control Rgister A
  TCCR0A = (1 << WGM00)    // FAST PWM
  ec:	83 ea       	ldi	r24, 0xA3	; 163
  ee:	80 bf       	out	0x30, r24	; 48
 		     | (1 << WGM01)
		     | (1 << COM0A1)	 // Set OC0A on Compare Match, Clear at TOP
		     | (1 << COM0B1);

  TCCR0B = (0 << WGM02)
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	83 bf       	out	0x33, r24	; 51
		     | (0 << CS02);


  // OC0A PWM Port
	// Write PWM-Value to OCR0A
  DDRB   |= (1 << PB2);
  f4:	ba 9a       	sbi	0x17, 2	; 23
  OCR0A = 0;
  f6:	16 be       	out	0x36, r1	; 54


  // OC0B PWM Port
	// Write PWM-Value to OCR0B
  DDRD   |= (1 << PD5);
  f8:	8d 9a       	sbi	0x11, 5	; 17
  OCR0B = 0;
  fa:	1c be       	out	0x3c, r1	; 60
  

  // Timer 1 PWM Init
  TCCR1A = (1 << WGM10)
  fc:	81 ea       	ldi	r24, 0xA1	; 161
  fe:	8f bd       	out	0x2f, r24	; 47
    		 | (0 << WGM11)
	 			 | (1 << COM1A1)		// Set OC1A/OC1B on Compare Match, Clear at TOP
				 | (1 << COM1B1);

  TCCR1B = (1 << WGM12)
 100:	89 e0       	ldi	r24, 0x09	; 9
 102:	8e bd       	out	0x2e, r24	; 46
				 | (0 << CS11)
				 | (0 << CS12);


  // OC1A PWM Port
  DDRB   |= (1 << PB3);
 104:	bb 9a       	sbi	0x17, 3	; 23
	OCR1AH = 0;
 106:	1b bc       	out	0x2b, r1	; 43
  OCR1AL = 0;
 108:	1a bc       	out	0x2a, r1	; 42


  // OC1B PWM Port
  DDRB   |= (1 << PB4);
 10a:	bc 9a       	sbi	0x17, 4	; 23
 	OCR1BH = 0;
 10c:	19 bc       	out	0x29, r1	; 41
  OCR1BL = 0;
 10e:	18 bc       	out	0x28, r1	; 40

}
 110:	08 95       	ret

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
